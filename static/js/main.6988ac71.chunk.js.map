{"version":3,"sources":["services/TokenService.js","services/StorageService.js","reducers/loading.js","actions/types.js","i18n.js","reducers/language.js","reducers/sidebar.js","reducers/logout.js","modules/login/business/reducer.js","modules/users/business/reducer.js","reducers/root.js","store/index.js","layouts/AppFooter.js","layouts/AppHeader.js","layouts/AppSidebar.js","modules/dashboard/index.js","modules/login/index.js","modules/users/index.js","layouts/PublicLayout.js","actions/language.js","actions/logout.js","layouts/PrivateLayout.js","App.js","serviceWorker.js","index.js","services/UserService.js","modules/login/business/action.js","modules/login/business/loginService.js","assets/armali-logo-tr.svg","components/ComponentSample.js","hooks/useFetch.js","services/index.js","components/LazyLoader.js","components/NoDataIndicator.js","modules/users/business/action.js","modules/users/business/userService.js","services/HttpService.js"],"names":["TokenService","setToken","value","StorageService","setItem","getToken","getItem","deleteToken","deleteItem","name","sessionStorage","removeItem","loading","state","action","result","type","payload","resources","tr","translation","en","i18n","use","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","language","changeLanguage","initialState","window","innerWidth","sidebar","logout","UserService","deleteUser","location","reload","response","error","rootReducer","combineReducers","form","formReducer","login","types","LOGIN_BEGIN","LOGIN_SUCCESS","LOGIN_FAILURE","console","user","GET_USERS_BEGIN","GET_USERS_SUCCESS","data","items","GET_USERS_FAILURE","SEARCH_USERS_BEGIN","SEARCH_USERS_SUCCESS","SEARCH_USERS_FAILURE","POST_USERS_BEGIN","POST_USERS_SUCCESS","POST_USERS_FAILURE","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","AppFooter","className","AppHeader","props","AppSidebar","forwardRef","ref","Dashboard","lazy","Login","Users","PublicLayout","exact","path","component","from","to","PrivateLayout","logoutApp","t","setLanguage","React","createRef","toolbarItems","icon","id","title","callback","log","onLogout","subItem","getUser","logo","elementClickedCallback","item","fullname","username","sidebarRef","routes","render","errorCode","parseInt","errorTitle","errorDescription","gobackCallback","history","back","defaultProps","connect","isSidebarOpen","dispatch","withTranslation","App","isAuth","Boolean","hostname","match","ReactDOM","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","setUser","JSON","stringify","parse","credential","loginBegin","credentials","postRequest","loginSuccess","loginFailure","res","module","exports","ComponentSample","useState","users","setUsers","setLoading","setError","useEffect","HttpService","getRequest","useFetch","LazyLoader","NoDataIndicator","text","getUsersBegin","getUsersSuccess","getUsersFailure","searchUsers","page","sizePerPage","sortField","sortOrder","search","searchUsersBegin","url","fetchUsers","searchUsersSuccess","searchUsersFailure","createUser","postUser","source","axios","CancelToken","client","create","baseURL","process","cancelToken","token","defaults","headers","common","timeout","beginRequest","request","options","handleError","get","body","post","putRequest","put","deleteRequest","delete","cancelRequest","cancel","isCancel","ACSHBAlert"],"mappings":"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","file":"static/js/main.6988ac71.chunk.js","sourcesContent":["import { StorageService } from \"./\";\r\n\r\nconst defaultName = \"token\";\r\n\r\n/**\r\n * TokenService browser taraflı token işlemleri için kullanlılır.\r\n *\r\n * @class\r\n * @example\r\n * import TokenService from \"./services/TokenService\";\r\n * TokenService.setToken(\"token_string\");\r\n * const token = TokenService.getToken();\r\n * TokenService.deleteToken();\r\n */\r\nconst TokenService = {\r\n  /**\r\n   * Token' ı kaydeder.\r\n   * @param {string} value  Kaydedilecek değer.\r\n   */\r\n  setToken(value) {\r\n    StorageService.setItem(defaultName, value);\r\n  },\r\n  /**\r\n   * Token' ı geri döndürür.\r\n   * @param   {string} name   Kayıt ismi.\r\n   * @returns {string}\r\n   */\r\n  getToken() {\r\n    return StorageService.getItem(defaultName);\r\n  },\r\n  /**\r\n   * Token' ı siler.\r\n   */\r\n  deleteToken() {\r\n    return StorageService.deleteItem(defaultName);\r\n  }\r\n};\r\n\r\nexport default TokenService;\r\n","/**\r\n * StorageService browser tabanlı depolama için kullanılır.\r\n * Default olarak sessionStorage nesnesini kullanır.\r\n *\r\n * @class\r\n * @example\r\n * import StorageService from \"./services/StorageService\";\r\n * StorageService.setItem(\"name\", {name: \"Alptuğ\"});\r\n * const name = StorageService.getItem(\"name\");\r\n * StorageService.deleteItem(\"name\");\r\n */\r\nconst StorageService = {\r\n  /**\r\n   * Verilen değeri verilen isimle kaydeder.\r\n   * @param {string} name   Hangi isimle kayıt edilecek.\r\n   * @param {string} value  Kaydedilecek değer.\r\n   */\r\n  setItem(name, value) {\r\n    sessionStorage.setItem(name, value);\r\n  },\r\n  /**\r\n   * Verilen isimdeki değeri geri getirir.\r\n   * @param   {string} name   Kayıt ismi.\r\n   * @returns {object}\r\n   */\r\n  getItem(name) {\r\n    return sessionStorage.getItem(name);\r\n  },\r\n  /**\r\n   * Verilen isimdeki değeri siler.\r\n   * @param {string} name   Kayıt ismi.\r\n   */\r\n  deleteItem(name) {\r\n    return sessionStorage.removeItem(name);\r\n  }\r\n};\r\n\r\nexport default StorageService;\r\n","/**\r\n * Uygulama bazında loading durumunu değiştirme işlemi için kullanılacak reducer.\r\n */\r\nimport * as types from \"../actions/types\";\r\n\r\nconst initialState = false;\r\n\r\nconst loading = (state = initialState, action) => {\r\n  let result = null;\r\n\r\n  switch (action.type) {\r\n    case types.LOADING:\r\n      result = action.payload;\r\n      break;\r\n    default:\r\n      result = state;\r\n      break;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport default loading;\r\n","/**\r\n * Action types.\r\n */\r\nconst LOADING = \"LOADING\";\r\nconst LANGUAGE = \"LANGUAGE\";\r\nconst SIDEBAR = \"SIDEBAR\";\r\nconst LOGOUT = \"LOGOUT\";\r\n\r\nexport { LOADING, LANGUAGE, SIDEBAR, LOGOUT };\r\n","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport TR from \"./locales/tr/lang.json\";\r\nimport EN from \"./locales/en/lang.json\";\r\n\r\n/**\r\n * Kaynak dil dosyaları.\r\n */\r\nconst resources = {\r\n  tr: {\r\n    translation: TR\r\n  },\r\n  en: {\r\n    translation: EN\r\n  }\r\n};\r\n\r\n/**\r\n * Initialize ve config methodları.\r\n */\r\ni18n.use(initReactI18next).init({\r\n  resources,\r\n  lng: \"tr\",\r\n  fallbackLng: \"tr\",\r\n  interpolation: {\r\n    escapeValue: false\r\n  }\r\n});\r\n\r\nexport default i18n;\r\n","/**\r\n * Uygulama bazında dil durumunu değiştirme işlemi için kullanılacak reducer.\r\n */\r\nimport * as types from \"../actions/types\";\r\nimport i18n from \"../i18n\";\r\n\r\nconst initialState = \"tr-TR\";\r\n\r\nconst language = (state = initialState, action) => {\r\n  let result = null;\r\n\r\n  switch (action.type) {\r\n    case types.LANGUAGE:\r\n      result = action.payload;\r\n      i18n.changeLanguage(action.payload);\r\n      break;\r\n    default:\r\n      result = state;\r\n      break;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport default language;\r\n","/**\r\n * Sidebar reducer.\r\n */\r\nimport * as types from \"../actions/types\";\r\n\r\nconst initialState = !(window.innerWidth <= 992);\r\n\r\nconst sidebar = (state = initialState, action) => {\r\n  let result = null;\r\n\r\n  switch (action.type) {\r\n    case types.SIDEBAR:\r\n      result = action.payload;\r\n      break;\r\n    default:\r\n      result = state;\r\n      break;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport default sidebar;\r\n","/**\r\n * Logout reducer methodu.\r\n */\r\nimport * as types from \"../actions/types\";\r\nimport { UserService, TokenService } from \"../services\";\r\n\r\nconst initialState = {};\r\n\r\nconst logout = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.LOGOUT:\r\n      UserService.deleteUser();\r\n      TokenService.deleteToken();\r\n      window.location.reload();\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default logout;\r\n","import { types } from \"./action\";\r\n\r\nconst initialState = {\r\n  response: null,\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\n/**\r\n * HTTP operasyonları için kullanılacak olan reducer.\r\n */\r\nexport default function login(state = initialState, action) {\r\n  switch (action.type) {\r\n    case types.LOGIN_BEGIN:\r\n      /**\r\n       * login operasyonu başladı, yükleniyor...\r\n       */\r\n      return {\r\n        response: null,\r\n        loading: true,\r\n        error: null\r\n      };\r\n\r\n    case types.LOGIN_SUCCESS:\r\n      /**\r\n       * login operasyonu başarı ile tamamlandı, loading özelliği false yapılabilir.\r\n       */\r\n      return {\r\n        error: null,\r\n        loading: false,\r\n        response: action.payload.response\r\n      };\r\n\r\n    case types.LOGIN_FAILURE:\r\n      /**\r\n       * login operasyonu başarı ile tamamlanamadı, loading özelliği false yapılabilir ve hata nesnesi buradan yakalanabilir.\r\n       */\r\n      console.error(action.payload);\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n        response: null\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { types } from \"./action\";\r\n\r\nconst initialState = {\r\n  response: [],\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\n/**\r\n * HTTP operasyonları için kullanılacak olan reducer.\r\n */\r\nexport default function user(state = initialState, action) {\r\n  switch (action.type) {\r\n    case types.GET_USERS_BEGIN:\r\n      /**\r\n       * fetchUsersAll operasyonu başladı, yükleniyor...\r\n       */\r\n      return {\r\n        response: [],\r\n        loading: true,\r\n        error: null\r\n      };\r\n\r\n    case types.GET_USERS_SUCCESS:\r\n      /**\r\n       * fetchUsersAll operasyonu başarı ile tamamlandı, loading özelliği false yapılabilir.\r\n       */\r\n      return {\r\n        error: null,\r\n        loading: false,\r\n        response: action.payload.data.items\r\n      };\r\n\r\n    case types.GET_USERS_FAILURE:\r\n      /**\r\n       * fetchUsersAll operasyonu başarı ile tamamlanamadı, loading özelliği false yapılabilir ve hata nesnesi buradan yakalanabilir.\r\n       */\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n        response: []\r\n      };\r\n\r\n    case types.SEARCH_USERS_BEGIN:\r\n      /**\r\n       * fetchUsers operasyonu başladı, yükleniyor...\r\n       */\r\n      return {\r\n        response: [],\r\n        loading: true,\r\n        error: null\r\n      };\r\n\r\n    case types.SEARCH_USERS_SUCCESS:\r\n      /**\r\n       * fetchUsers operasyonu başarı ile tamamlandı, loading özelliği false yapılabilir.\r\n       */\r\n      return {\r\n        error: null,\r\n        loading: false,\r\n        response: action.payload.data.items\r\n      };\r\n\r\n    case types.SEARCH_USERS_FAILURE:\r\n      /**\r\n       * fetchUsers operasyonu başarı ile tamamlanamadı, loading özelliği false yapılabilir ve hata nesnesi buradan yakalanabilir.\r\n       */\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n        response: []\r\n      };\r\n\r\n    case types.POST_USERS_BEGIN:\r\n      /**\r\n       * postUser operasyonu başladı, yükleniyor...\r\n       */\r\n      return {\r\n        response: null,\r\n        loading: true,\r\n        error: null\r\n      };\r\n\r\n    case types.POST_USERS_SUCCESS:\r\n      /**\r\n       * postUser operasyonu başarı ile tamamlandı, loading özelliği false yapılabilir.\r\n       */\r\n      return {\r\n        error: null,\r\n        loading: false,\r\n        response: null\r\n      };\r\n\r\n    case types.POST_USERS_FAILURE:\r\n      /**\r\n       * postUser operasyonu başarı ile tamamlanamadı, loading özelliği false yapılabilir ve hata nesnesi buradan yakalanabilir.\r\n       */\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n        response: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport loading from \"./loading\";\r\nimport language from \"./language\";\r\nimport sidebar from \"./sidebar\";\r\nimport logout from \"./logout\";\r\nimport login from \"../modules/login/business/reducer\";\r\nimport user from \"../modules/users/business/reducer\";\r\n\r\n/**\r\n * Ana redux reducer dosyası\r\n */\r\nconst rootReducer = combineReducers({\r\n  form: formReducer,\r\n  login,\r\n  loading,\r\n  language,\r\n  sidebar,\r\n  logout,\r\n  user\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport rootReducer from \"../reducers/root\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\n/**\r\n * Ana store dosyasıdır.\r\n * async işlemler için redux-thunk kullanılmıştır.\r\n */\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { ACSHBFooter } from \"acshb-react-common/layouts\";\r\n\r\nconst AppFooter = () => <ACSHBFooter className=\"bg-white text-center p-3 border-top\" />;\r\n\r\nexport default AppFooter;\r\n","import React from \"react\";\r\nimport { ACSHBToolbar } from \"acshb-react-common/layouts\";\r\n\r\nconst AppHeader = props => {\r\n  return <ACSHBToolbar {...props} />;\r\n};\r\n\r\nexport default AppHeader;\r\n","import React, { forwardRef } from \"react\";\r\nimport { ACSHBSidebar } from \"acshb-react-common/layouts\";\r\n\r\n// eslint-disable-next-line react/display-name\r\nconst AppSidebar = forwardRef((props, ref) => {\r\n  return <ACSHBSidebar {...props} ref={ref} />;\r\n});\r\n\r\nexport default AppSidebar;\r\n","import { lazy } from \"react\";\r\n\r\n/**\r\n * Lazyload yapısı.\r\n */\r\nconst Dashboard = lazy(() => import(\"./views/Dashboard\"));\r\n\r\nexport default Dashboard;\r\n","import { lazy } from \"react\";\r\n\r\n/**\r\n * Lazyload yapısı.\r\n */\r\nconst Login = lazy(() => import(\"./views/Login\"));\r\n\r\nexport default Login;\r\n","import { lazy } from \"react\";\r\n\r\n/**\r\n * Lazyload yapısı.\r\n */\r\nconst Users = lazy(() => import(\"./views/Users\"));\r\n\r\nexport default Users;\r\n","import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { Login } from \"../modules\";\r\n\r\nconst PublicLayout = () => (\r\n  <div className=\"private-layout\">\r\n    <Switch>\r\n      <Route exact path=\"/login\" component={Login} />\r\n      <Redirect from=\"*\" to=\"/login\" />\r\n    </Switch>\r\n  </div>\r\n);\r\n\r\nexport default PublicLayout;\r\n","/**\r\n * Uygulama bazında dil durumunu değiştirme işlemi için kullanılacak action.\r\n */\r\nimport * as types from \"./types\";\r\n\r\nconst language = language => {\r\n  return {\r\n    type: types.LANGUAGE,\r\n    payload: language\r\n  };\r\n};\r\n\r\nexport default language;\r\n","/**\r\n * Logout action methodudur.\r\n */\r\nimport * as types from \"./types\";\r\n\r\nconst logout = () => {\r\n  return {\r\n    type: types.LOGOUT\r\n  };\r\n};\r\n\r\nexport default logout;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { ACSHBSection } from \"acshb-react-common/components\";\r\nimport ACSHBErrorView from \"acshb-react-common/views/errorView\";\r\nimport { language, logout } from \"../actions\";\r\nimport { UserService } from \"../services\";\r\nimport { AppHeader, AppSidebar, AppFooter } from \"./\";\r\nimport { Dashboard, Users } from \"../modules/\";\r\nimport routes from \"../routes/routes.json\";\r\nimport logo from \"../assets/armali-logo-tr.svg\";\r\n\r\nconst PrivateLayout = props => {\r\n  const { logoutApp, t, setLanguage } = props;\r\n  const sidebar = React.createRef();\r\n  const toolbarItems = [\r\n    {\r\n      icon: \"acshb-icon-arrow-right1\",\r\n      id: 0,\r\n      title: \"Seçenek 1\",\r\n      value: \"0\",\r\n      callback: () => {\r\n        console.log(\"Seçenek 1 Tıklandı\");\r\n      }\r\n    },\r\n    {\r\n      icon: \"acshb-icon-arrow-right1\",\r\n      id: 1,\r\n      title: \"Seçenek 2\",\r\n      value: \"1\"\r\n    },\r\n    {\r\n      icon: \"acshb-icon-settings\",\r\n      id: 2,\r\n      title: \"Ayarlar\",\r\n      value: \"2\"\r\n    },\r\n    {\r\n      icon: \"acshb-icon-log-out\",\r\n      id: 5,\r\n      title: \"Çıkış\",\r\n      value: \"5\",\r\n      callback: () => onLogout()\r\n    },\r\n    {\r\n      icon: \"acshb-icon-globe\",\r\n      id: 3,\r\n      title: \"English\",\r\n      value: \"en-US\",\r\n      subItem: true,\r\n      callback: () => {\r\n        setLanguage(\"en-US\");\r\n      }\r\n    },\r\n    {\r\n      icon: \"acshb-icon-globe\",\r\n      id: 4,\r\n      title: \"Türkçe\",\r\n      value: \"tr-TR\",\r\n      subItem: true,\r\n      callback: () => {\r\n        setLanguage(\"tr-TR\");\r\n      }\r\n    }\r\n  ];\r\n  const user = UserService.getUser();\r\n\r\n  const onToolbarItemClicked = item => {\r\n    if (item.callback) item.callback();\r\n  };\r\n\r\n  const onLogout = () => logoutApp();\r\n\r\n  return (\r\n    <div className=\"private-layout\">\r\n      <AppHeader\r\n        title={t(\"title\")}\r\n        className=\"bg-white shadow-sm\"\r\n        items={toolbarItems}\r\n        logo={logo}\r\n        elementClickedCallback={onToolbarItemClicked}\r\n        fullname={user ? user.username : \"username\"}\r\n        sidebarRef={sidebar}\r\n      />\r\n      <section className=\"d-flex\">\r\n        <AppSidebar\r\n          ref={sidebar}\r\n          className=\"border-right bg-white\"\r\n          routes={routes}\r\n        />\r\n        <ACSHBSection>\r\n          <Switch>\r\n            <Route exact path=\"/dashboard\" component={Dashboard} />\r\n            <Route path=\"/kullanicilar\" component={Users} />\r\n            <Redirect exact from=\"/\" to=\"/dashboard\" />\r\n            <Route\r\n              path=\"*\"\r\n              render={() => (\r\n                <ACSHBErrorView\r\n                  logo={logo}\r\n                  errorCode={parseInt(t(\"errors.404.code\"), 10)}\r\n                  errorTitle={t(\"errors.404.title\")}\r\n                  errorDescription={t(\"errors.404.description\")}\r\n                  gobackCallback={() => window.history.back()}\r\n                />\r\n              )}\r\n            />\r\n          </Switch>\r\n        </ACSHBSection>\r\n      </section>\r\n      <AppFooter />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    language: state.language,\r\n    loading: state.loading,\r\n    isSidebarOpen: state.sidebar\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setLanguage: lng => dispatch(language(lng)),\r\n    logoutApp: () => dispatch(logout())\r\n  };\r\n};\r\n\r\nPrivateLayout.propTypes = {\r\n  /**\r\n   * Uygulama geneli için redux loading durumu.\r\n   */\r\n  loading: PropTypes.bool,\r\n  /**\r\n   * Uygulama geneli için redux dil durumu.\r\n   */\r\n  language: PropTypes.string,\r\n  /**\r\n   * Uygulama geneli için redux dil değiştirme methodu.\r\n   */\r\n  setLanguage: PropTypes.func,\r\n  /**\r\n   * Translate methodu.\r\n   */\r\n  t: PropTypes.func,\r\n  /**\r\n   * Redux logout methodu.\r\n   */\r\n  logoutApp: PropTypes.func\r\n};\r\n\r\nPrivateLayout.defaultProps = {\r\n  loading: false,\r\n  language: \"tr-TR\"\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withTranslation()(PrivateLayout));\r\n","import React from \"react\";\r\nimport { PublicLayout, PrivateLayout } from \"./layouts\";\r\nimport { TokenService } from \"./services\";\r\nimport \"./styles.scss\";\r\n\r\nconst App = () => {\r\n  const isAuth = TokenService.getToken();\r\n\r\n  return (\r\n    <div className=\"app\">{isAuth ? <PrivateLayout /> : <PublicLayout />}</div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","/* eslint-disable no-undef */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Suspense } from \"react\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store/\";\r\nimport \"./i18n\";\r\nimport App from \"./App\";\r\nimport { LazyLoader } from \"./components\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Suspense fallback={<LazyLoader />}>\r\n      <HashRouter>\r\n        <App />\r\n      </HashRouter>\r\n    </Suspense>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import StorageService from \"./StorageService\";\r\n\r\n/**\r\n * Kullanıcı servisi olarak kullanılır. Default olarak **universal-cookie** paketini kullanmaktadır.\r\n *\r\n * @class\r\n * @example\r\n * import UserService from \"./services/userService\";\r\n * UserService.setItem(\"name\", {name: \"Alptuğ\", username: \"alptug\"});\r\n * const user = UserService.getItem();\r\n * UserService.deleteUser();\r\n */\r\nconst UserService = {\r\n  /**\r\n   * Verilen kullanıcı bilgilerini kaydeder.\r\n   * @param {object} user Kullanıcı bilgileri JSON objesi.\r\n   */\r\n  setUser(user) {\r\n    StorageService.setItem(\"user\", JSON.stringify(user));\r\n  },\r\n  /**\r\n   * Verilen kullanıcı bilgilerini kaydeder.\r\n   * @returns {object} Geriye kullanıcıyı döndürür.\r\n   */\r\n  getUser() {\r\n    return JSON.parse(StorageService.getItem(\"user\"));\r\n  },\r\n  /**\r\n   * Kullanıcı bilgilerini siler kaydeder.\r\n   */\r\n  deleteUser() {\r\n    StorageService.deleteItem(\"user\");\r\n  }\r\n};\r\n\r\nexport default UserService;\r\n","import { postLogin } from \"./loginService\";\r\nimport UserService from \"../../../services/UserService\";\r\nimport TokenService from \"../../../services/TokenService\";\r\n\r\n/**\r\n * Redux action tipleridir.\r\n */\r\nexport const types = {\r\n  LOGIN_BEGIN: \"LOGIN_BEGIN\",\r\n  LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\r\n  LOGIN_FAILURE: \"LOGIN_FAILURE\"\r\n};\r\n\r\n/**\r\n * Login action methodudur.\r\n *\r\n * @param {object} credential Login ekranından gelen kimlik bilgileridir.\r\n */\r\nexport const login = credential => {\r\n  return dispatch => {\r\n    dispatch(loginBegin());\r\n    return postLogin(credential)\r\n      .then(response => {\r\n        UserService.setUser(response.data);\r\n        TokenService.setToken(\"{token_string}\");\r\n        dispatch(loginSuccess(response));\r\n        window.location = \"/\";\r\n      })\r\n      .catch(error => {\r\n        dispatch(loginFailure(error));\r\n      });\r\n  };\r\n};\r\n\r\n/**\r\n * Login operasyonu başladığında durumu takip edebilmek için hazırlanmıştır ve 'login' methodundan hemen sonra tetiklenmelidir.\r\n */\r\nexport const loginBegin = () => ({\r\n  type: types.LOGIN_BEGIN\r\n});\r\n\r\n/**\r\n * Login operasyonu başarı ile tamamlandığında durumu takip edebilmek için hazırlanmıştır ve 'loginBegin' methodundan hemen sonra tetiklenmelidir.\r\n */\r\nexport const loginSuccess = response => ({\r\n  type: types.LOGIN_SUCCESS,\r\n  payload: { response }\r\n});\r\n\r\n/**\r\n * Login operasyonu başarısızlık ile tamamlanamadığında durumu takip edebilmek için hazırlanmıştır ve http methodunun catch methodunun içinde çağırılmalıdır.\r\n */\r\nexport const loginFailure = res => ({\r\n  type: types.LOGIN_FAILURE,\r\n  payload: res.response\r\n});\r\n","import { postRequest } from \"../../../services/HttpService\";\r\n\r\n/**\r\n *\r\n * @param {object} credentials Kullanıcı kimlik bilgileri {username: \"username\", password: \"password\"}\r\n */\r\nexport function postLogin(credentials) {\r\n  const url = \"/login\";\r\n  return postRequest(url, credentials);\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/armali-logo-tr.d228921b.svg\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { useFetch } from \"../hooks/useFetch\";\r\n\r\n/**\r\n * Lazy komponenti yükleme işlemi yaparken görüntülenecek olan komponenttir.\r\n *\r\n * @param {function} t      Çeviri için kullanılacak methodtur.\r\n * @param {function} i18n   Dili değiştirmek için kullanılacak methodtur.\r\n */\r\nconst ComponentSample = props => {\r\n  const { t } = props;\r\n  const [data, loading, error] = useFetch();\r\n\r\n  console.log(data, loading, error);\r\n\r\n  return loading ? <p>Yüleniyor...</p> : <div>{t(\"sample\")}</div>;\r\n};\r\n\r\nComponentSample.propTypes = {\r\n  t: PropTypes.func,\r\n  i18n: PropTypes.object\r\n};\r\n\r\nComponentSample.defaultProps = {};\r\n\r\nexport default withTranslation()(ComponentSample);\r\n","import { useEffect, useState } from \"react\";\r\nimport { HttpService } from \"../services\";\r\n\r\n/**\r\n * Fetch Hook Örneğidir.\r\n */\r\nexport function useFetch() {\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    HttpService.getRequest(\"/users\")\r\n      .then(response => {\r\n        setUsers(response.data.items);\r\n        setLoading(false);\r\n      })\r\n      .catch(error => {\r\n        setError(error);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  return [users, loading, error];\r\n}\r\n","import UserService from \"./UserService\";\r\nimport TokenService from \"./TokenService\";\r\nimport StorageService from \"./StorageService\";\r\nimport * as HttpService from \"./HttpService\";\r\n\r\nexport { UserService, TokenService, HttpService, StorageService };\r\n","import React from \"react\";\r\n\r\n/**\r\n * LazyLoader komponenti, modüller yüklenirken görüntülenecek dom nesnesidir.\r\n */\r\nconst LazyLoader = () => {\r\n  return <p>...</p>;\r\n};\r\n\r\nLazyLoader.propTypes = {};\r\n\r\nLazyLoader.defaultProps = {};\r\n\r\nexport default LazyLoader;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * Veri yok gösterim komponentidir.\r\n *\r\n * @param {string} props Veri yok yazısı için kullanılacak parametredir.\r\n */\r\nconst NoDataIndicator = props => {\r\n  return <p>{props.text}</p>;\r\n};\r\n\r\nNoDataIndicator.propTypes = {\r\n  /**\r\n   * Veri bulunamadı mesajı.\r\n   */\r\n  text: PropTypes.string.isRequired\r\n};\r\n\r\nNoDataIndicator.defaultProps = {\r\n  text: \"There is no data.\"\r\n};\r\n\r\nexport default NoDataIndicator;\r\n","import { fetchUsers, postUser, fetchAllUsers } from \"./userService\";\r\n\r\n/**\r\n * Redux action tipleridir.\r\n */\r\nexport const types = {\r\n  GET_USERS_BEGIN: \"GET_USERS_BEGIN\",\r\n  GET_USERS_SUCCESS: \"GET_USERS_SUCCESS\",\r\n  GET_USERS_FAILURE: \"GET_USERS_FAILURE\",\r\n  POST_USERS_BEGIN: \"POST_USERS_BEGIN\",\r\n  POST_USERS_SUCCESS: \"POST_USERS_SUCCESS\",\r\n  POST_USERS_FAILURE: \"POST_USERS_FAILURE\",\r\n  SEARCH_USERS_BEGIN: \"SEARCH_USERS_BEGIN\",\r\n  SEARCH_USERS_SUCCESS: \"SEARCH_USERS_SUCCESS\",\r\n  SEARCH_USERS_FAILURE: \"SEARCH_USERS_FAILURE\"\r\n};\r\n\r\n/**\r\n * Users get action methodudur.\r\n */\r\nexport const getUsers = () => {\r\n  return dispatch => {\r\n    dispatch(getUsersBegin());\r\n    return fetchAllUsers()\r\n      .then(response => {\r\n        dispatch(getUsersSuccess(response));\r\n      })\r\n      .catch(error => {\r\n        dispatch(getUsersFailure(error));\r\n      });\r\n  };\r\n};\r\n\r\n/**\r\n * fetchUsersAll operasyonu başladığında durumu takip edebilmek için hazırlanmıştır ve 'getUsers' methodundan hemen sonra tetiklenmelidir.\r\n */\r\nexport const getUsersBegin = () => ({\r\n  type: types.GET_USERS_BEGIN\r\n});\r\n\r\n/**\r\n * fetchUsersAll operasyonu başarı ile tamamlandığında durumu takip edebilmek için hazırlanmıştır ve 'getUsersBegin' methodundan hemen sonra tetiklenmelidir.\r\n */\r\nexport const getUsersSuccess = response => ({\r\n  type: types.GET_USERS_SUCCESS,\r\n  payload: response\r\n});\r\n\r\n/**\r\n * fetchUsersAll operasyonu başarısızlık ile tamamlanamadığında durumu takip edebilmek için hazırlanmıştır ve http methodunun catch methodunun içinde çağırılmalıdır.\r\n */\r\nexport const getUsersFailure = response => ({\r\n  type: types.GET_USERS_FAILURE,\r\n  payload: response\r\n});\r\n\r\n/**\r\n * Search users get action methodudur.\r\n */\r\nexport const searchUsers = (\r\n  page,\r\n  sizePerPage,\r\n  sortField,\r\n  sortOrder,\r\n  search\r\n) => {\r\n  return dispatch => {\r\n    dispatch(searchUsersBegin());\r\n    return fetchUsers(page, sizePerPage, sortField, sortOrder, search)\r\n      .then(response => {\r\n        dispatch(searchUsersSuccess(response));\r\n      })\r\n      .catch(error => {\r\n        dispatch(searchUsersFailure(error));\r\n      });\r\n  };\r\n};\r\n\r\n/**\r\n * fetchUsers operasyonu başladığında durumu takip edebilmek için hazırlanmıştır ve 'searchUsers' methodundan hemen sonra tetiklenmelidir.\r\n */\r\nexport const searchUsersBegin = () => ({\r\n  type: types.SEARCH_USERS_BEGIN\r\n});\r\n\r\n/**\r\n * fetchUsers operasyonu başarı ile tamamlandığında durumu takip edebilmek için hazırlanmıştır ve 'searchUsersBegin' methodundan hemen sonra tetiklenmelidir.\r\n */\r\nexport const searchUsersSuccess = response => ({\r\n  type: types.SEARCH_USERS_SUCCESS,\r\n  payload: response\r\n});\r\n\r\n/**\r\n * fetchUsers operasyonu başarısızlık ile tamamlanamadığında durumu takip edebilmek için hazırlanmıştır ve http methodunun catch methodunun içinde çağırılmalıdır.\r\n */\r\nexport const searchUsersFailure = response => ({\r\n  type: types.SEARCH_USERS_FAILURE,\r\n  payload: response\r\n});\r\n\r\n/**\r\n * Users post action methodudur.\r\n */\r\nexport const createUser = user => {\r\n  return dispatch => {\r\n    dispatch(getUsersBegin());\r\n    return postUser(user)\r\n      .then(response => {\r\n        dispatch(getUsersSuccess(response));\r\n      })\r\n      .catch(error => {\r\n        dispatch(getUsersFailure(error));\r\n      });\r\n  };\r\n};\r\n\r\n/**\r\n * postUser operasyonu başladığında durumu takip edebilmek için hazırlanmıştır ve 'createUser' methodundan hemen sonra tetiklenmelidir.\r\n */\r\nexport const postUserBegin = () => ({\r\n  type: types.POST_USERS_BEGIN\r\n});\r\n\r\n/**\r\n * postUser operasyonu başarı ile tamamlandığında durumu takip edebilmek için hazırlanmıştır ve 'postUserBegin' methodundan hemen sonra tetiklenmelidir.\r\n */\r\nexport const postUserSuccess = response => ({\r\n  type: types.POST_USERS_SUCCESS,\r\n  payload: response\r\n});\r\n\r\n/**\r\n * postUser operasyonu başarısızlık ile tamamlanamadığında durumu takip edebilmek için hazırlanmıştır ve http methodunun catch methodunun içinde çağırılmalıdır.\r\n */\r\nexport const postUserFailure = response => ({\r\n  type: types.POST_USERS_FAILURE,\r\n  payload: response\r\n});\r\n","import { getRequest, postRequest } from \"../../../services/HttpService\";\r\n\r\n/**\r\n * Kullanıcı http get servis methodu.\r\n */\r\nexport function fetchAllUsers() {\r\n  const url = \"/users\";\r\n  return getRequest(url);\r\n}\r\n\r\nexport function fetchUsers(page, sizePerPage, sortField, sortOrder, search) {\r\n  const url = `/users?page=${page}&limit=${sizePerPage}&sortBy=${sortField}&order=${sortOrder}&${\r\n    search && search !== null ? `search=${search}` : \"\"\r\n  }`;\r\n  return getRequest(url);\r\n}\r\n\r\nexport function postUser(user) {\r\n  const url = \"/users\";\r\n  return postRequest(url, user);\r\n}\r\n","import axios from \"axios\";\r\nimport { ACSHBAlert } from \"acshb-react-common/components\";\r\nimport TokenService from \"./TokenService\";\r\n\r\n/**\r\n * Token kontrolü TokenService üzerinden sorgulanıyor.\r\n */\r\nconst token = TokenService.getToken();\r\nconst baseURL = process.env.REACT_APP_BASE_URL;\r\nconst CancelToken = axios.CancelToken;\r\nconst source = CancelToken.source();\r\n\r\n/**\r\n * Bir axios client' ı yaratılıyor.\r\n */\r\nconst client = axios.create({\r\n  baseURL: baseURL,\r\n  cancelToken: source.token\r\n});\r\n\r\n/**\r\n * default davranışlar burada setleniyor.\r\n */\r\nclient.defaults.headers.common[\"Content-Type\"] = \"application/json\";\r\nclient.defaults.timeout = 60000;\r\n//if (token) client.defaults.headers.common[\"Authorization\"] = token ? token : \"\";\r\n\r\n/**\r\n * Bir request göndermeyi sağlar.\r\n * Request nesnesi içerisinde gönderilebilecek 'method' parametresi get, post, put ve delete olabilir.\r\n * Daha fazla ayrıntı için bkz: https://github.com/axios/axios\r\n *\r\n * @param {object} request Request objesi.\r\n * @param {object} options config objesi isteğe bağlıdır.\r\n * @returns {Promise} Geriye bir Promise nesnesi döndürür.\r\n * @example\r\n * beginRequest({url: \"/users\"}).then(response => console.log(response));\r\n * beginRequest({url: \"/users\"}, {timeout: 120000}).then(response => console.log(response));\r\n */\r\nexport const beginRequest = (request, options) => {\r\n  return client(request, options).catch(handleError);\r\n};\r\n\r\n/**\r\n * Get isteği gönderir\r\n * Daha fazla ayrıntı için bkz: https://github.com/axios/axios\r\n *\r\n * @param {object} request Request objesi.\r\n * @param {object} options config objesi isteğe bağlıdır.\r\n * @returns {Promise} Geriye bir Promise nesnesi döndürür.\r\n * @example\r\n * getRequest(\"/users\").then(response => console.log(response));\r\n * get(\"/users\", {timeout: 120000}).then(response => console.log(response));\r\n */\r\nexport const getRequest = (url, options) => {\r\n  return client.get(url, options).catch(handleError);\r\n};\r\n\r\n/**\r\n * Post isteği gönderir\r\n * Daha fazla ayrıntı için bkz: https://github.com/axios/axios\r\n *\r\n * @param {object} request Request objesi.\r\n * @param {object} body Payload objesi.\r\n * @param {object} options config objesi isteğe bağlıdır.\r\n * @returns {Promise} Geriye bir Promise nesnesi döndürür.\r\n * @example\r\n * postRequest(\"/users\", {firstname: Joe, lastname: \"Doe\"}, {timeout: 120000}).then(response => console.log(response));\r\n * postRequest(\"/users\", {firstname: Joe, lastname: \"Doe\"}, {timeout: 120000}).then(response => console.log(response));\r\n */\r\nexport const postRequest = (url, body, options) => {\r\n  return client.post(url, body, options).catch(handleError);\r\n};\r\n\r\n/**\r\n * Put isteği gönderir\r\n * Daha fazla ayrıntı için bkz: https://github.com/axios/axios\r\n *\r\n * @param {object} request Request objesi.\r\n * @param {object} body Payload objesi.\r\n * @param {object} options config objesi isteğe bağlıdır.\r\n * @returns {Promise} Geriye bir Promise nesnesi döndürür.\r\n * @example\r\n * putRequest(\"/users\", {firstname: Joe, lastname: \"Doe\"}, {timeout: 120000}).then(response => console.log(response));\r\n * putRequest(\"/users\", {firstname: Joe, lastname: \"Doe\"}, {timeout: 120000}).then(response => console.log(response));\r\n */\r\nexport const putRequest = (url, body, options) => {\r\n  return client.put(url, body, options).catch(handleError);\r\n};\r\n\r\n/**\r\n * Delete isteği gönderir\r\n * Daha fazla ayrıntı için bkz: https://github.com/axios/axios\r\n *\r\n * @param {object} request Request objesi.\r\n * @param {object} options config objesi isteğe bağlıdır.\r\n * @returns {Promise} Geriye bir Promise nesnesi döndürür.\r\n * @example\r\n * deleteRequest(\"/users/1678\", {timeout: 120000}).then(response => console.log(response));\r\n * deleteRequest(\"/users/1678\", {timeout: 120000}).then(response => console.log(response));\r\n */\r\nexport const deleteRequest = (url, options) => {\r\n  return client.delete(url, options).catch(handleError);\r\n};\r\n\r\n/**\r\n * Request' i iptal eder.\r\n */\r\nexport const cancelRequest = () => {\r\n  source.cancel(\"Kullanıcı request' i iptal etti.\");\r\n};\r\n\r\n/**\r\n * Hata fırlatıldığında çalışacak olan callback methodurur.\r\n *\r\n * @param {object} error Hata ayrıntılarını içerir\r\n */\r\nconst handleError = error => {\r\n  if (axios.isCancel(error)) {\r\n    console.error(\"Request canceled\", error.message);\r\n  } else {\r\n    ACSHBAlert.error(\"Hata\", error.response ? error.response.data : error);\r\n    console.error(error);\r\n  }\r\n};\r\n"],"sourceRoot":""}